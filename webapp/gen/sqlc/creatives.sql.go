// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: creatives.sql

package sqlc

import (
	"context"
)

const archiveCreative = `-- name: ArchiveCreative :exec
UPDATE creatives
SET archived = true
WHERE id = ?
`

func (q *Queries) ArchiveCreative(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, archiveCreative, id)
	return err
}

const createCreative = `-- name: CreateCreative :execlastid
INSERT INTO creatives (
    name, link, img
) VALUES (
             ?, ?, ?
         )
`

type CreateCreativeParams struct {
	Name string `json:"name"`
	Link string `json:"link"`
	Img  string `json:"img"`
}

func (q *Queries) CreateCreative(ctx context.Context, arg CreateCreativeParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createCreative, arg.Name, arg.Link, arg.Img)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const getCreative = `-- name: GetCreative :one
SELECT id, name, link, img, status FROM creatives
WHERE id = ? LIMIT 1
`

func (q *Queries) GetCreative(ctx context.Context, id int64) (Creative, error) {
	row := q.db.QueryRowContext(ctx, getCreative, id)
	var i Creative
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Link,
		&i.Img,
		&i.Status,
	)
	return i, err
}

const listCreatives = `-- name: ListCreatives :many
SELECT id, name, link, img, status FROM creatives
ORDER BY id DESC
`

func (q *Queries) ListCreatives(ctx context.Context) ([]Creative, error) {
	rows, err := q.db.QueryContext(ctx, listCreatives)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Creative{}
	for rows.Next() {
		var i Creative
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Link,
			&i.Img,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
